/*
 * Channel API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.InboundMessage;
import com.konfigthis.client.model.InboundMessageMetadata;
import com.konfigthis.client.model.InboundMessageSender;
import com.konfigthis.client.model.MessagesImportReceivedMessageResponse;
import com.konfigthis.client.model.OutboundMessage;
import com.konfigthis.client.model.OutboundMessageToInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call importReceivedMessageCall(String channelId, InboundMessage inboundMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboundMessage;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/inbound_messages"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importReceivedMessageValidateBeforeCall(String channelId, InboundMessage inboundMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling importReceivedMessage(Async)");
        }

        return importReceivedMessageCall(channelId, inboundMessage, _callback);

    }


    private ApiResponse<MessagesImportReceivedMessageResponse> importReceivedMessageWithHttpInfo(String channelId, InboundMessage inboundMessage) throws ApiException {
        okhttp3.Call localVarCall = importReceivedMessageValidateBeforeCall(channelId, inboundMessage, null);
        Type localVarReturnType = new TypeToken<MessagesImportReceivedMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importReceivedMessageAsync(String channelId, InboundMessage inboundMessage, final ApiCallback<MessagesImportReceivedMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importReceivedMessageValidateBeforeCall(channelId, inboundMessage, _callback);
        Type localVarReturnType = new TypeToken<MessagesImportReceivedMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportReceivedMessageRequestBuilder {
        private final InboundMessageSender sender;
        private final String body;
        private final InboundMessageMetadata metadata;
        private final String channelId;
        private String subject;
        private Integer deliveredAt;
        private List<File> attachments;

        private ImportReceivedMessageRequestBuilder(InboundMessageSender sender, String body, InboundMessageMetadata metadata, String channelId) {
            this.sender = sender;
            this.body = body;
            this.metadata = metadata;
            this.channelId = channelId;
        }

        /**
         * Set subject
         * @param subject Subject of the message (optional)
         * @return ImportReceivedMessageRequestBuilder
         */
        public ImportReceivedMessageRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set deliveredAt
         * @param deliveredAt Time in seconds at which message was created in external system (optional)
         * @return ImportReceivedMessageRequestBuilder
         */
        public ImportReceivedMessageRequestBuilder deliveredAt(Integer deliveredAt) {
            this.deliveredAt = deliveredAt;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return ImportReceivedMessageRequestBuilder
         */
        public ImportReceivedMessageRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for importReceivedMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InboundMessage inboundMessage = buildBodyParams();
            return importReceivedMessageCall(channelId, inboundMessage, _callback);
        }

        private InboundMessage buildBodyParams() {
            InboundMessage inboundMessage = new InboundMessage();
            inboundMessage.sender(this.sender);
            inboundMessage.subject(this.subject);
            inboundMessage.body(this.body);
            inboundMessage.metadata(this.metadata);
            inboundMessage.deliveredAt(this.deliveredAt);
            inboundMessage.attachments(this.attachments);
            return inboundMessage;
        }

        /**
         * Execute importReceivedMessage request
         * @return MessagesImportReceivedMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public MessagesImportReceivedMessageResponse execute() throws ApiException {
            InboundMessage inboundMessage = buildBodyParams();
            ApiResponse<MessagesImportReceivedMessageResponse> localVarResp = importReceivedMessageWithHttpInfo(channelId, inboundMessage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importReceivedMessage request with HTTP info returned
         * @return ApiResponse&lt;MessagesImportReceivedMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessagesImportReceivedMessageResponse> executeWithHttpInfo() throws ApiException {
            InboundMessage inboundMessage = buildBodyParams();
            return importReceivedMessageWithHttpInfo(channelId, inboundMessage);
        }

        /**
         * Execute importReceivedMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessagesImportReceivedMessageResponse> _callback) throws ApiException {
            InboundMessage inboundMessage = buildBodyParams();
            return importReceivedMessageAsync(channelId, inboundMessage, _callback);
        }
    }

    /**
     * Sync inbound message
     * Import a message that was received by the channel.
     * @param channelId The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ImportReceivedMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
     </table>
     */
    public ImportReceivedMessageRequestBuilder importReceivedMessage(InboundMessageSender sender, String body, InboundMessageMetadata metadata, String channelId) throws IllegalArgumentException {
        if (sender == null) throw new IllegalArgumentException("\"sender\" is required but got null");
        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (metadata == null) throw new IllegalArgumentException("\"metadata\" is required but got null");
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ImportReceivedMessageRequestBuilder(sender, body, metadata, channelId);
    }
    private okhttp3.Call importSyncedMessageCall(String channelId, OutboundMessage outboundMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outboundMessage;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/outbound_messages"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSyncedMessageValidateBeforeCall(String channelId, OutboundMessage outboundMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling importSyncedMessage(Async)");
        }

        return importSyncedMessageCall(channelId, outboundMessage, _callback);

    }


    private ApiResponse<MessagesImportReceivedMessageResponse> importSyncedMessageWithHttpInfo(String channelId, OutboundMessage outboundMessage) throws ApiException {
        okhttp3.Call localVarCall = importSyncedMessageValidateBeforeCall(channelId, outboundMessage, null);
        Type localVarReturnType = new TypeToken<MessagesImportReceivedMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importSyncedMessageAsync(String channelId, OutboundMessage outboundMessage, final ApiCallback<MessagesImportReceivedMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSyncedMessageValidateBeforeCall(channelId, outboundMessage, _callback);
        Type localVarReturnType = new TypeToken<MessagesImportReceivedMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportSyncedMessageRequestBuilder {
        private final List<OutboundMessageToInner> to;
        private final String body;
        private final InboundMessageMetadata metadata;
        private final String channelId;
        private String senderName;
        private String subject;
        private String authorId;
        private Integer deliveredAt;
        private List<File> attachments;

        private ImportSyncedMessageRequestBuilder(List<OutboundMessageToInner> to, String body, InboundMessageMetadata metadata, String channelId) {
            this.to = to;
            this.body = body;
            this.metadata = metadata;
            this.channelId = channelId;
        }

        /**
         * Set senderName
         * @param senderName Name of the sender (optional)
         * @return ImportSyncedMessageRequestBuilder
         */
        public ImportSyncedMessageRequestBuilder senderName(String senderName) {
            this.senderName = senderName;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the message (optional)
         * @return ImportSyncedMessageRequestBuilder
         */
        public ImportSyncedMessageRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set authorId
         * @param authorId ID of the teammate on behalf of whom the message is sent (optional)
         * @return ImportSyncedMessageRequestBuilder
         */
        public ImportSyncedMessageRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set deliveredAt
         * @param deliveredAt Time in seconds at which message was created in external system (optional)
         * @return ImportSyncedMessageRequestBuilder
         */
        public ImportSyncedMessageRequestBuilder deliveredAt(Integer deliveredAt) {
            this.deliveredAt = deliveredAt;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return ImportSyncedMessageRequestBuilder
         */
        public ImportSyncedMessageRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for importSyncedMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OutboundMessage outboundMessage = buildBodyParams();
            return importSyncedMessageCall(channelId, outboundMessage, _callback);
        }

        private OutboundMessage buildBodyParams() {
            OutboundMessage outboundMessage = new OutboundMessage();
            outboundMessage.senderName(this.senderName);
            outboundMessage.to(this.to);
            outboundMessage.subject(this.subject);
            outboundMessage.authorId(this.authorId);
            outboundMessage.body(this.body);
            outboundMessage.metadata(this.metadata);
            outboundMessage.deliveredAt(this.deliveredAt);
            outboundMessage.attachments(this.attachments);
            return outboundMessage;
        }

        /**
         * Execute importSyncedMessage request
         * @return MessagesImportReceivedMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public MessagesImportReceivedMessageResponse execute() throws ApiException {
            OutboundMessage outboundMessage = buildBodyParams();
            ApiResponse<MessagesImportReceivedMessageResponse> localVarResp = importSyncedMessageWithHttpInfo(channelId, outboundMessage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importSyncedMessage request with HTTP info returned
         * @return ApiResponse&lt;MessagesImportReceivedMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessagesImportReceivedMessageResponse> executeWithHttpInfo() throws ApiException {
            OutboundMessage outboundMessage = buildBodyParams();
            return importSyncedMessageWithHttpInfo(channelId, outboundMessage);
        }

        /**
         * Execute importSyncedMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessagesImportReceivedMessageResponse> _callback) throws ApiException {
            OutboundMessage outboundMessage = buildBodyParams();
            return importSyncedMessageAsync(channelId, outboundMessage, _callback);
        }
    }

    /**
     * Sync outbound message
     * Import a message that was sent from the channel.
     * @param channelId The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ImportSyncedMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An accepted message </td><td>  -  </td></tr>
     </table>
     */
    public ImportSyncedMessageRequestBuilder importSyncedMessage(List<OutboundMessageToInner> to, String body, InboundMessageMetadata metadata, String channelId) throws IllegalArgumentException {
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (metadata == null) throw new IllegalArgumentException("\"metadata\" is required but got null");
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ImportSyncedMessageRequestBuilder(to, body, metadata, channelId);
    }
}
